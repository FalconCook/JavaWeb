1、jsp运行原理
	1)、index.jsp页面被翻译成了一个index_jsp.java--->index.jsp.class
	2)、HttpJspBase继承HttpServlet，所以index_jsp就是一个Servlet
	3)、每次请求都调用_jspService
	
2、jsp基本语法
	1、html模板元素 html标签
	2、jsp脚本片段 <% %>
	3、jsp表达式 <%=new Date() %>
	4、jsp声明 <%!	代码		%>
		里面的代码都会写在jspservice方法之外，test2_jsp类里面
		比较少用
	5、jsp注释							jsp原文件		.java文件	返回的html页面
				<!-- HTML注释 -->		可见			不可见		不可见		
				<%-- JSP注释 --%>		可见			可见			可见
				//java注释				可见			可见			不可见
	<!-- HTML注释 -->		翻译成.java文件被忽略		
	<%-- JSP注释 --%>		浏览器输出的时候被
	//java注释				编译成.class文件时被忽略
	
	6、jsp指令
			jsp指令是为jsp引擎设计，它们并不产生任何可见输出，
		而是告诉引擎如何处理jsp页面中的其余部分
		<%@指令名 属性名=属性值 %>
		page指令：	定义页面如何解析
		include指令：静态包含
		taglib指令：在页面引入标签库
		
		page指令属性：
			1）import：用来在页面导包
			2）pageEncoding：指定页面使用的字符集
			3）contentType 设置响应头，页面如何响应给浏览器
			4）errorPage：指定发生错误去向的页面
			5）isErrorPage：表示当前页面是一个错误页面，如果为true则可以在页面中使用exception对象。	
			6）session：当前页面是否参与会话，是否可以使用session对象，默认是true
			7）isELIgnored：是否自动忽略EL表达式，默认为false，不忽略
			8）info：定义页面的信息（描述）
		
		include指令：静态包含
			<%@ 指令名 属性名=属性值%>
			<%@ include 属性名=属性值%>
			可以把另外一个页面包含进来，整个页面复制到serivce方法里面。
			jsp引擎不翻译、编译要包含的页面
	
		taglib指令：在页面引入标签库
			<%@ taglib 属性名=属性值%>
			
	7、jsp标签：jsp里面内置了很多标签，每个标签执行一段代码，有不同的功能。action元素
		<jsp:include>:也是在页面包含另一个页面，动态包含
		page:表示要包含的页面路径
		不是复制整个页面，再一行行写出去
		org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/grammer/250.jsp", out, false);
		先翻译、编译再包含
		
3、jsp九大隐含对象：我们在页面可以直接使用的对象

	五大常规对象
		Trowable exception = null;			代表捕获异常对象
	   	ServletConfig config = null;		代表servlet配置信息
	   		jsp页面对应的servlet的配置信息
	    JspWriter out = null;				代表可以在页面输出数据的out
	    	out.write();
	    Object page = this;					代表当前jsp
	    	没this实用
	    HttpServletResponse response		代表当次响应的对象
    		response
    		
    四大域对象：用来在其他资源共享数据
    	PageContext pageContext = null;		代表当前页面对象
    		1、获取其他隐含对象	 pageContext.getXX();
    		2、作为域对象共享数据。只能在当前也没共享数据，离开页面就无法共享
    			String key, object value
    			域对象.setAttribute(key,value) 给相应的域中设置内容
    			域对象.getAttribute(key) 获取域中的内容
    			
    				
    	HttpServletRequest request,			代表封装当次请求详细信息的对象
    		1、在同一个请求对象中共享数据
    		
		HttpSession session = null;			代表会话对象
			1、在同一个会话中共享数据。浏览器打开，开始会话。浏览器关闭，结束会话。
				会话就是和web应用沟通，不同的web应用就是不同会话
			
		ServletContext application = null;	代表整个web应用
			1、application代表当前web应用
				只要在同一个web应用中都可以共享数据
				web应用只要不卸载都可以访问
	    
    	
		
	
	
	